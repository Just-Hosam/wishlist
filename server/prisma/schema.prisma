// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Schema

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  age           Int?
  bio           String?
  accounts      Account[]
  sessions      Session[]
  games         Game[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Game Schema

enum GameCategory {
  WISHLIST
  OWNED
  COMPLETED
  GRAVEYARD
}

enum Platform {
  NINTENDO
  PLAYSTATION
}

model Game {
  id                 String        @id @default(cuid())
  name               String
  description        String?
  coverImageUrl      String?
  length             Int?
  category           GameCategory  @default(WISHLIST)

  // User relationship
  userId             String
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Price relationships
  prices             GamePrice[]

  // bookkeeping
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  @@index([userId, category])
  @@index([name])
  @@index([userId, createdAt])
}

model GamePrice {
  id            String   @id @default(cuid())
  gameId        String
  game          Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  platform      Platform
  externalId    String   // NSUID, etc.
  storeUrl      String?  // Store URL for re-fetching prices

  countryCode   String?  @db.Char(2)
  currencyCode  String?  @db.Char(3)

  regularPrice  Decimal? @db.Decimal(10, 2)
  currentPrice  Decimal? @db.Decimal(10, 2)

  lastFetchedAt DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([gameId, platform])
  @@index([gameId])
}
